# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
default-lease-time 600;
max-lease-time 7200;
server-name "netboot";
# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;
# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;
# Enable netbooting
allow booting;
allow bootp;
# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
#log-facility local7;
# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.


# This is a very basic subnet declaration.

subnet 192.168.124.0 netmask 255.255.255.0 {
  range 192.168.124.128 192.168.124.254;
  option routers 192.168.124.1;
}

# Group definition for netbooting
group {
  option domain-name "netboot";
  # IP Addressing
  option subnet-mask 255.255.255.0;
  option broadcast-address 192.168.124.255;
  # DNS
  option domain-name-servers 192.168.124.1;
  # Gateway
  option routers 192.168.124.1;
  next-server 192.168.124.1;
  server-name "vmhost";
  filename "debian12-base.ipxe";

  # NFS setup
  option root-path "192.168.124.1:/VMs/nfs/debian12-base";

  # Specific hosts
  host DebianPXEClient {
    hardware ethernet 52:54:00:02:34:f1;
    fixed-address 192.168.124.8;
    option host-name "DebianPXEClient-1";
  }

  host DebianPXEClient2 {
    hardware ethernet 52:54:00:05:b6:d8;
    fixed-address 192.168.124.9;
    option host-name "DebianPXEClient-2";
  }
}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.example.org;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.example.org;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
