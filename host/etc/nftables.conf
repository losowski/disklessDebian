flush ruleset

define DEV_WORLD = eno1
define DEV_PRIVATE = virbr0
define NET_PRIVATE = { 192.168.122.0/24, 192.168.124.0/24 }

table ip global {
	# Inbound Sub-Chains
	chain inbound_external {
		# allow SSH connections from VirtualMachine host
		 ip protocol . th dport vmap { tcp .   22 : accept \
									 }
	}
	chain inbound_private {
		# allow DHCP, DNS, SSH, TFTP from the wired private network
		ip protocol . th dport vmap { tcp .   22 : accept, \
									  tcp .   53 : accept, \
									  udp .   53 : accept, \
									  udp .   67 : accept, \
									  tcp .   69 : accept, \
									  udp .   69 : accept, \
									  tcp .   80 : accept, \
									  tcp .  443 : accept, \
									}
	}
	# Inbound Chain
	chain inbound {
		type filter hook input priority 0; policy drop;

		# Allow traffic from established and related packets, drop invalid
		ct state vmap { established : accept, related : accept, invalid : drop }

		# allow loopback traffic, anything else jump to chain for further evaluation
		iifname vmap { lo : accept, \
					   $DEV_WORLD : jump inbound_external, \
					   $DEV_PRIVATE : jump inbound_private \
						}
	}
	# forward Chain
	chain forward {
		type filter hook forward priority 0; policy drop;

		# Allow traffic from established and related packets, drop invalid
		ct state vmap { established : accept, related : accept, invalid : drop }

		# connections from the internal net to the internet: wlan to lan and lan to wlan not allowed
		meta iifname . meta oifname { $DEV_PRIVATE . $DEV_WORLD, \
									  $DEV_WORLD . $DEV_PRIVATE \
									  } accept
	}
	# Postrouting Chain
	chain postrouting {
		type nat hook postrouting priority 100; policy accept;

		# masquerade private IP addresses
		ip saddr $NET_PRIVATE meta oifname $DEV_WORLD counter masquerade
	}
}
